[{"C:\\Users\\Shashank\\astrobots-pose\\src\\index.js":"1","C:\\Users\\Shashank\\astrobots-pose\\src\\reportWebVitals.js":"2","C:\\Users\\Shashank\\astrobots-pose\\src\\App.js":"3","C:\\Users\\Shashank\\astrobots-pose\\src\\util.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":3552,"mtime":1610231876858,"results":"8","hashOfConfig":"6"},{"size":7125,"mtime":1610224335351,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1enppop",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\Shashank\\astrobots-pose\\src\\index.js",[],["20","21"],"C:\\Users\\Shashank\\astrobots-pose\\src\\reportWebVitals.js",[],"C:\\Users\\Shashank\\astrobots-pose\\src\\App.js",["22","23","24","25","26"],"C:\\Users\\Shashank\\astrobots-pose\\src\\util.js",["27"],"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nconst color = \"aqua\";\r\nconst boundingBoxColor = \"red\";\r\nconst lineWidth = 2;\r\n\r\nexport const tryResNetButtonName = \"tryResNetButton\";\r\nexport const tryResNetButtonText = \"[New] Try ResNet50\";\r\nconst tryResNetButtonTextCss = \"width:100%;text-decoration:underline;\";\r\nconst tryResNetButtonBackgroundCss = \"background:#e61d5f;\";\r\n\r\nfunction isAndroid() {\r\n  return /Android/i.test(navigator.userAgent);\r\n}\r\n\r\nfunction isiOS() {\r\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n}\r\n\r\nexport function isMobile() {\r\n  return isAndroid() || isiOS();\r\n}\r\n\r\nfunction setDatGuiPropertyCss(propertyText, liCssString, spanCssString = \"\") {\r\n  var spans = document.getElementsByClassName(\"property-name\");\r\n  for (var i = 0; i < spans.length; i++) {\r\n    var text = spans[i].textContent || spans[i].innerText;\r\n    if (text == propertyText) {\r\n      spans[i].parentNode.parentNode.style = liCssString;\r\n      if (spanCssString !== \"\") {\r\n        spans[i].style = spanCssString;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateTryResNetButtonDatGuiCss() {\r\n  setDatGuiPropertyCss(\r\n    tryResNetButtonText,\r\n    tryResNetButtonBackgroundCss,\r\n    tryResNetButtonTextCss\r\n  );\r\n}\r\n\r\n/**\r\n * Toggles between the loading UI and the main canvas UI.\r\n */\r\nexport function toggleLoadingUI(\r\n  showLoadingUI,\r\n  loadingDivId = \"loading\",\r\n  mainDivId = \"main\"\r\n) {\r\n  if (showLoadingUI) {\r\n    document.getElementById(loadingDivId).style.display = \"block\";\r\n    document.getElementById(mainDivId).style.display = \"none\";\r\n  } else {\r\n    document.getElementById(loadingDivId).style.display = \"none\";\r\n    document.getElementById(mainDivId).style.display = \"block\";\r\n  }\r\n}\r\n\r\nfunction toTuple({ y, x }) {\r\n  return [y, x];\r\n}\r\n\r\nexport function drawPoint(ctx, y, x, r, color) {\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n}\r\n\r\n/**\r\n * Draws a line on a canvas, i.e. a joint\r\n */\r\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(ax * scale, ay * scale);\r\n  ctx.lineTo(bx * scale, by * scale);\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.strokeStyle = color;\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\r\n */\r\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\r\n  const adjacentKeyPoints = posenet.getAdjacentKeyPoints(\r\n    keypoints,\r\n    minConfidence\r\n  );\r\n\r\n  adjacentKeyPoints.forEach((keypoints) => {\r\n    drawSegment(\r\n      toTuple(keypoints[0].position),\r\n      toTuple(keypoints[1].position),\r\n      color,\r\n      scale,\r\n      ctx\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Draw pose keypoints onto a canvas\r\n */\r\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\r\n  for (let i = 0; i < keypoints.length; i++) {\r\n    const keypoint = keypoints[i];\r\n\r\n    if (keypoint.score < minConfidence) {\r\n      continue;\r\n    }\r\n\r\n    const { y, x } = keypoint.position;\r\n    drawPoint(ctx, y * scale, x * scale, 3, color);\r\n  }\r\n}\r\n\r\n/**\r\n * Draw the bounding box of a pose. For example, for a whole person standing\r\n * in an image, the bounding box will begin at the nose and extend to one of\r\n * ankles\r\n */\r\nexport function drawBoundingBox(keypoints, ctx) {\r\n  const boundingBox = posenet.getBoundingBox(keypoints);\r\n\r\n  ctx.rect(\r\n    boundingBox.minX,\r\n    boundingBox.minY,\r\n    boundingBox.maxX - boundingBox.minX,\r\n    boundingBox.maxY - boundingBox.minY\r\n  );\r\n\r\n  ctx.strokeStyle = boundingBoxColor;\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Converts an arary of pixel data into an ImageData object\r\n */\r\nexport async function renderToCanvas(a, ctx) {\r\n  const [height, width] = a.shape;\r\n  const imageData = new ImageData(width, height);\r\n\r\n  const data = await a.data();\r\n\r\n  for (let i = 0; i < height * width; ++i) {\r\n    const j = i * 4;\r\n    const k = i * 3;\r\n\r\n    imageData.data[j + 0] = data[k + 0];\r\n    imageData.data[j + 1] = data[k + 1];\r\n    imageData.data[j + 2] = data[k + 2];\r\n    imageData.data[j + 3] = 255;\r\n  }\r\n\r\n  ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\n/**\r\n * Draw an image on a canvas\r\n */\r\nexport function renderImageToCanvas(image, size, canvas) {\r\n  canvas.width = size[0];\r\n  canvas.height = size[1];\r\n  const ctx = canvas.getContext(\"2d\");\r\n\r\n  ctx.drawImage(image, 0, 0);\r\n}\r\n\r\n/**\r\n * Draw heatmap values, one of the model outputs, on to the canvas\r\n * Read our blog post for a description of PoseNet's heatmap outputs\r\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\r\n */\r\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\r\n  const ctx = canvas.getContext(\"2d\");\r\n  const radius = 5;\r\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, \"int32\"));\r\n\r\n  drawPoints(ctx, scaledValues, radius, color);\r\n}\r\n\r\n/**\r\n * Used by the drawHeatMapValues method to draw heatmap points on to\r\n * the canvas\r\n */\r\nfunction drawPoints(ctx, points, radius, color) {\r\n  const data = points.buffer().values;\r\n\r\n  for (let i = 0; i < data.length; i += 2) {\r\n    const pointY = data[i];\r\n    const pointX = data[i + 1];\r\n\r\n    if (pointX !== 0 && pointY !== 0) {\r\n      ctx.beginPath();\r\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\r\n      ctx.fillStyle = color;\r\n      ctx.fill();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Draw offset vector values, one of the model outputs, on to the canvas\r\n * Read our blog post for a description of PoseNet's offset vector outputs\r\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\r\n */\r\n// export function drawOffsetVectors(\r\n//     heatMapValues, offsets, outputStride, scale = 1, ctx) {\r\n//   const offsetPoints =\r\n//       posenet.singlePose.getOffsetPoints(heatMapValues, outputStride, offsets);\r\n\r\n//   const heatmapData = heatMapValues.buffer().values;\r\n//   const offsetPointsData = offsetPoints.buffer().values;\r\n\r\n//   for (let i = 0; i < heatmapData.length; i += 2) {\r\n//     const heatmapY = heatmapData[i] * outputStride;\r\n//     const heatmapX = heatmapData[i + 1] * outputStride;\r\n//     const offsetPointY = offsetPointsData[i];\r\n//     const offsetPointX = offsetPointsData[i + 1];\r\n\r\n//     drawSegment(\r\n//         [heatmapY, heatmapX], [offsetPointY, offsetPointX], color, scale, ctx);\r\n//   }\r\n// }\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":12,"column":13,"nodeType":"34","messageId":"35","endLine":12,"endColumn":15},{"ruleId":"32","severity":1,"message":"36","line":21,"column":9,"nodeType":"34","messageId":"35","endLine":21,"endColumn":19},{"ruleId":"32","severity":1,"message":"37","line":22,"column":9,"nodeType":"34","messageId":"35","endLine":22,"endColumn":20},{"ruleId":"32","severity":1,"message":"38","line":51,"column":9,"nodeType":"34","messageId":"35","endLine":51,"endColumn":26},{"ruleId":"32","severity":1,"message":"39","line":52,"column":9,"nodeType":"34","messageId":"35","endLine":52,"endColumn":26},{"ruleId":"40","severity":1,"message":"41","line":45,"column":14,"nodeType":"42","messageId":"43","endLine":45,"endColumn":16},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar","'videoWidth' is assigned a value but never used.","'videoHeight' is assigned a value but never used.","'minPoseConfidence' is assigned a value but never used.","'minPartConfidence' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]